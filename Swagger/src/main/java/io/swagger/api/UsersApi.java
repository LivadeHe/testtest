/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.46).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.User;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-09-15T15:38:28.959381536Z[GMT]")
@Validated
public interface UsersApi {

    @Operation(summary = "Alle Benutzer abrufen", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Erfolgreiche Abfrage der Benutzerliste", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))) })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> usersGet();


    @Operation(summary = "Neuen Benutzer erstellen", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Erfolgreich erstellter Benutzer", content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))) })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<User> usersPost(@Parameter(in = ParameterIn.DEFAULT, description = "Daten des neuen Benutzers", required=true, schema=@Schema()) @Valid @RequestBody User body);


    @Operation(summary = "Benutzer löschen", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Erfolgreich gelöschter Benutzer") })
    @RequestMapping(value = "/users/{userId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> usersUserIdDelete(@Parameter(in = ParameterIn.PATH, description = "Die ID des zu löschenden Benutzers", required=true, schema=@Schema()) @PathVariable("userId") Integer userId);


    @Operation(summary = "Benutzerdetails abrufen", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Erfolgreiche Abfrage der Benutzerdetails", content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))) })
    @RequestMapping(value = "/users/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<User> usersUserIdGet(@Parameter(in = ParameterIn.PATH, description = "Die ID des Benutzers", required=true, schema=@Schema()) @PathVariable("userId") Integer userId);


    @Operation(summary = "Benutzerdetails aktualisieren", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Erfolgreich aktualisierte Benutzerdetails", content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))) })
    @RequestMapping(value = "/users/{userId}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<User> usersUserIdPut(@Parameter(in = ParameterIn.PATH, description = "Die ID des Benutzers", required=true, schema=@Schema()) @PathVariable("userId") Integer userId, @Parameter(in = ParameterIn.DEFAULT, description = "Aktualisierte Benutzerdaten", required=true, schema=@Schema()) @Valid @RequestBody User body);

}

